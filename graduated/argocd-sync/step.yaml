version: '1.0'
kind: step-type
metadata:
  name: argocd-sync
  version: 1.14.0
  isPublic: true
  description: This pipeline plugin trigger a sync for ArgoCD app
  sources:
    - 'https://github.com/codefresh-io/cf-argo-plugin'
  stage: graduated
  categories:
    - GitOps
  official: true
  icon:
    type: svg
    url: https://cdn.jsdelivr.net/gh/codefresh-io/steps/graduated/argocd-sync/argo.svg
    background: "#f4f4f4"
  maintainers:
    - name: Nazar Rohozhuk
  examples:
    - workflow:
        sync_and_wait:
          title: Sync ArgoCD app and wait
          type: argocd-sync
          arguments:
            context: 'argo-demo'
            app_name: 'demo_app'
    - workflow:
        sync_and_wait_with_flags:
          title: Sync ArgoCD app and wait
          type: argocd-sync
          arguments:
            context: 'argo-demo'
            app_name: 'demo_app'
            additional_flags: '--loglevel debug --timeout 1200 --grpc-web --grpc-web-root-path /argocd'
  latest: true
spec:
  arguments: |
    {
      "definitions": {},
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "additionalProperties": false,
      "patterns": [],
      "required": [
          "app_name"
      ],
      "properties": {
          "host": {
            "type": "string",
            "description": "Host for argo integration, examlple https://argo. Used only when context is not provided!",
            "default": ""
          },
          "username": {
            "type": "string",
            "description": "Username of argo integration. Used only when context is not provided!",
            "default": ""
          },
          "password": {
            "type": "string",
            "description": "Password of argo integration. Used only when context is not provided!",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Name of argocd context from integrations",
            "default": ""
          },
          "app_name": {
              "type": "string",
              "description": "The argocd application to be synced"
          },
          "sync": {
              "type": "boolean",
              "description": "Specify whether to trigger an ArgoCD sync",
              "default": true
          },
          "prune": {
              "type": "boolean",
              "description": "Allow deleting unexpected resources",
              "default": false
          },
          "revision": {
              "type": "string",
              "description": "Sync to a specific revision. Preserves parameter overrides",
              "default": ""
          },
          "wait_healthy": {
              "type": "boolean",
              "description": "Specify whether to wait for sync to be completed (in canary consider wait for suspended status)",
              "default": false
          },
          "wait_for_suspend": {
              "type": "boolean",
              "description": "Specify whether to wait for application suspended status",
              "default": false
          },
          "env_name": {
              "type": "string",
              "description": "Environment from codefresh for auto sync",
              "default": ""
          },
          "additional_flags": {
              "type": ["string","array"],
              "items": {
                  "type": "string"
              },
              "description": "Additional flags for argocd command ( like --grpc-web, so on )",
              "default": ""
          },
          "additional_flags_for_wait_cmd": {
              "type": "string",
              "description": "Additional flags for argocd app wait command ( like --grpc-web, so on )",
              "default": ""
          },
          "debug": {
              "type": "boolean",
              "description": "Debug sync command ( print in terminal )",
              "default": false
          },
          "rollback": {
              "type": "boolean",
              "description": "Do rollback to previous rollout if wait command get failed ",
              "default": false
          }
      }
    }
  steps:
    runArgoCd:
      title: "Run ArgoCD"
      image: "quay.io/codefreshplugins/cf-argo-plugin:0.2.1"
      commands:
        - >-
          cf-argo-plugin sync "${{app_name}}"
          --cf-host=$CF_URL --cf-token=$CF_API_KEY --cf-integration="${{context}}"
          --argo-host=${{host}} --argo-username=${{username}} --argo-password="${{password}}"
          --sync=${{sync}} --prune=${{prune}} --wait-healthy=${{wait_healthy}} --wait-suspend=${{wait_for_suspend}} --debug=${{debug}}
          --revision="${{revision}}" --wait-additional-flags="${{additional_flags_for_wait_cmd}}"
          --out-commands-file /codefresh/volume/${CF_BLOCK_NAME}-argo-executor --out-export-file /codefresh/volume/${CF_BLOCK_NAME}-argo-export_url
        - chmod +x /codefresh/volume/${CF_BLOCK_NAME}-argo-executor
        - chmod +x /codefresh/volume/${CF_BLOCK_NAME}-argo-export_url
        - /codefresh/volume/${CF_BLOCK_NAME}-argo-export_url
        - export ARGOCD_OPTS=$(echo ${{additional_flags}} | tr "," " ")
        - echo ARGOCD_OPTS=$ARGOCD_OPTS >> /meta/env_vars_to_export
    executeArgoCd:
      title: "ExecuteArgoCd"
      image: "codefresh/cf-argo-plugin:0.2.1"
      commands:
        - /codefresh/volume/${CF_BLOCK_NAME}-argo-executor
#    sendArgoMetadata:
#      title: "SendArgoMetadata"
#      fail_fast: false
#      image: "codefresh/cf-argo-plugin:0.2.0"
#      commands:
#        - cf-argo-plugin process-result ${{app_name}} --cf-host=$CF_URL --cf-token=$CF_API_KEY --cf-integration="${{context}}" --pipeline-id=$CF_PIPELINE_NAME --build-id=$CF_BUILD_ID --out-export-file /codefresh/volume/argo-export_gitops
    rollback:
      title: "Rollback"
      image: "codefresh/cf-argo-plugin:0.1.4"
      commands:
        - cf-argo-plugin rollback ${{app_name}} --code=$ARGO_SYNC_ERROR --cf-host=$CF_URL --cf-token=$CF_API_KEY --cf-integration="${{context}}" --needRollback=${{rollback}}
