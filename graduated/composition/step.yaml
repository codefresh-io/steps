kind: step-type
version: "1.0"
metadata:
  name: composition
  title: Run a Docker Compose file
  version: 1.0.3
  isPublic: true
  description: Run a docker-compose.yml composition as a pipeline step.
  sources:
    - 'https://github.com/codefresh-io/steps/tree/master/graduated/composition'
  stage: graduated
  official: true
  categories:
    - featured
    - docker
  icon:
    type: svg
    url: https://cdn.jsdelivr.net/gh/codefresh-io/steps/graduated/composition/icon-2.svg
    background: "#E9FFFD"
  maintainers:
    - name: Codefresh INC
  examples:
    - workflow:
        Composition:
          title: Running Composition
          type: composition
          arguments:
            composition:
              version: '2'
              services:
                db:
                  image: postgres
            composition_candidates:
              test_service:
                image: ${{build_step}}
                command: gulp integration_test
                working_dir: /app
                environment:
                  - key=value
spec:
  arguments: |
    {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "definitions": {},
        "type": "object",
        "additionalProperties": true,
        "patterns": [],
        "required": ["composition", "composition_candidates"],
        "registry_contexts": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "description": "The registry logical name of one of the inserted registries from the integration view. The default values is primary registries by domain. Note that this is needed to pull images from specified registries."
        },
        "properties": {
            "working_directory": {
                "type": "string",
                "description": "The directory in which to search for the composition file. It can be an explicit path in the containerâ€™s file system, or a variable that references another step. The default is ${{main_clone}}. Note that this is completely different from working_dir which is on the service level."
            },
            "composition": {
                "oneOf": [
                {
                    "type": "string"
                },
                {
                    "type": "object",
                    "properties": {},
                    "additionalProperties": true,
                    "patterns": []
                }],
                "description": "The composition you want to run. It can be an inline YAML definition, a path to a composition file on the file system, or the logical name of a composition stored in the Codefresh system. We support most features of <a href=\"https://docs.docker.com/compose/compose-file/compose-file-v2/\">Docker compose version 2.0</a> and <a href=\"https://docs.docker.com/compose/compose-file/\">3.0</a>"
            },
            "composition_candidates": {
                "type": "object",
                "properties": {},
                "additionalProperties": true,
                "patterns": [],
                "description": "The definition of the service to monitor. Each candidate has a single command parameter that decides what will be tested.",
                "examples": ["test_service:\n    image: ${{build_step}}\n    command: gulp integration_test\n    working_dir: /app\n    environment:\n      - key=value"]
            },
            "composition_variables": {
                "type": "array",
                "items": {
                    "type": "string"
                },
                "description": "A set of environment variables to substitute in the composition. Notice that these variables are docker-compose variables and NOT environment variables"
            }
        }
    }
