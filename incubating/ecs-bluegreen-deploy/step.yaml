kind: step-type
version: '1.0'
metadata:
  name: ecs-bluegreen-deploy
  version: 0.0.4
  isPublic: true
  description: 'Updates an AWS ECS Service with a new image, and then deploys it with AWS CodeDeploy. Works with all deployment configurations, including AllAtOnce, Linear, and Canary. Authenticate with either an IAM role from your EKS cluster, or with a simple Access Key ID+Token.'
  sources:
    - 'https://github.com/codefresh-io/steps/tree/master/incubating/ecs-bluegreen-deploy'
    - 'https://aws.amazon.com/blogs/containers/aws-codedeploy-now-supports-linear-and-canary-deployments-for-amazon-ecs/'
  stage: incubating
  maintainers:
    - name: Pavel Nosovets
      email: pavel.nosovets@codefresh.io
  categories:
    - deployment
  official: false
  tags: []
  icon:
    type: image
    size:
      large:
        url: >-
          https://cdn.jsdelivr.net/gh/codefresh-io/steps/incubating/ecs-deploy/icon.jpg
  examples:
    - description: Deploy using an Access Key
      workflow:
        deploy_to_ecs:
          type: ecs-bluegreen-deploy
          arguments:
            AWS_DEFAULT_REGION: ${{AWS_DEFAULT_REGION}}
            AWS_ACCESS_KEY_ID: ${{AWS_ACCESS_KEY_ID}}
            AWS_SECRET_ACCESS_KEY: ${{AWS_SECRET_ACCESS_KEY}}
            CLUSTER_NAME: MY_ECS_CLUSTER
            SERVICE_NAME: MY_ECS_SERVICE
            IMAGE: IMAGE:TAG
            CODEDEPLOY_APPLICATION: AppECS-${CLUSTER_NAME}-${SERVICE_NAME}
            CODEDEPLOY_DEPLOYMENT_GROUP: DgpECS-${CLUSTER_NAME}-${SERVICE_NAME}
            MAX_WAIT_TIME: 60
    - description: Deploy using an IAM role from your EKS cluster
      workflow:
        deploy_to_ecs_with_role:
          type: ecs-bluegreen-deploy
          arguments:
            AWS_DEFAULT_REGION: ${{AWS_DEFAULT_REGION}}
            AWS_ASSUME_ROLE: ${{AWS_ACCESS_ROLE_ARN}}
            CLUSTER_NAME: MY_ECS_CLUSTER
            SERVICE_NAME: MY_ECS_SERVICE
            IMAGE: IMAGE:TAG
            CODEDEPLOY_APPLICATION: AppECS-${CLUSTER_NAME}-${SERVICE_NAME}
            CODEDEPLOY_DEPLOYMENT_GROUP: DgpECS-${CLUSTER_NAME}-${SERVICE_NAME}
            MAX_WAIT_TIME: 60
spec:
  arguments: |-
    {
        "definitions": {},
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "additionalProperties": true,
        "patterns": [],
        "required": [
            "CLUSTER_NAME",
            "SERVICE_NAME",
            "CODEDEPLOY_APPLICATION",
            "CODEDEPLOY_DEPLOYMENT_GROUP"
        ],
        "properties": {
            "AWS_ASSUME_ROLE": {
                "type": "string",
                "description": "ARN of an IAM role from your EKS cluster to assume. The role must be associated with the EKS cluster where your Codefresh Runner is installed, either via the Runner's EKS nodegroup (see https://docs.aws.amazon.com/eks/latest/userguide/create-node-role.html), or via the Runner's Kubernetes service account (see https://codefresh.io/docs/docs/administration/codefresh-runner/#injecting-aws-arn-roles-into-the-cluster)."
            },
            "AWS_ACCESS_KEY_ID": {
                "type": "string",
                "description": "Amazon access key ID"
            },
            "AWS_SECRET_ACCESS_KEY": {
                "type": "string",
                "description": "Amazon secret access key"
            },
            "AWS_DEFAULT_REGION": {
                "type": "string",
                "description": "AWS region"
            },
            "CLUSTER_NAME": {
                "type": "string",
                "description": "ECS cluster name"
            },
            "SERVICE_NAME": {
                "type": "string",
                "description": "ECS service name"
            },
            "IMAGE": {
                "type": "string",
                "description": "Image name and tag to deploy"
            },
            "CODEDEPLOY_APPLICATION": {
                "type": "string",
                "description": "Optional. Default value - AppECS-[CLUSTER_NAME]-[SERVICE_NAME]"
            },
            "CODEDEPLOY_DEPLOYMENT_GROUP": {
                "type": "string",
                "description": "Optional. Default value - DgpECS-[CLUSTER_NAME]-[SERVICE_NAME]"
            },
            "MAX_WAIT_TIME": {
                "type": "string",
                "description": "Optional. Time in minutes to wait for deployment to succeed. Default value - 60 minutes"
            }
        }
    }
  stepsTemplate: |-
    main:
      name: ecs-deploy
      image: codefreshplugins/ecs-bluegreen-deploy:0.0.4
      shell: bash
      commands:
        - |-
          entrypoint.sh \
            [[- if .Arguments.AWS_ASSUME_ROLE ]]
            --iam-role [[.Arguments.AWS_ASSUME_ROLE]] \
            [[- end ]]
            --cluster [[.Arguments.CLUSTER_NAME]] \
            --service [[.Arguments.SERVICE_NAME]] \
            --image [[.Arguments.IMAGE]] \
            --codedeploy-application [[.Arguments.CODEDEPLOY_APPLICATION]] \
            --codedeploy-deployment-group [[.Arguments.CODEDEPLOY_DEPLOYMENT_GROUP]] \
            --max-wait-time [[.Arguments.MAX_WAIT_TIME]]
      environment:
      [[ range $key, $val := .Arguments ]]
        - '[[ $key ]]=[[ $val ]]'
      [[- end ]]
  delimiters:
    left: '[['
    right: ']]'
metrics:
  finished: 29

