kind: step-type
version: '1.0'
metadata:
  name: git-commit
  version: 0.0.13
  isPublic: true
  description: Commit and push changes to repository
  icon:
    type: svg
    url: https://cdn.jsdelivr.net/gh/codefresh-io/steps/incubating/git-commit/icon.svg
    background: "#0B3E49"
  sources:
    - https://github.com/codefresh-io/steps/tree/master/incubating/git-commit
  stage: incubating
  maintainers:
    - name: Dima Golomozy
    - name: Oleh Zahnitko
  categories:
    - featured
    - git
  official: true
  tags: []
  examples:
    - workflow:
        commit_and_push:
          title: Commit changes and push
          type: git-commit
          arguments:
            repo: '${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}'
            git: 'github'
            working_directory: '/codefresh/volume/${{CF_REPO_NAME}}'
            commit_message: 'Some commit message'
            git_user_name: 'git-user-name'
            git_user_email: 'git-user@email.com'
            allow_empty: false
            add:
              - file1.txt
              - file2.txt
              - ./dir3

spec:
  arguments: |
    {
      "definitions": {},
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "additionalProperties": false,
      "patterns": [],
      "required": [
          "repo",
          "git"
      ],
      "properties": {
          "repo": {
              "type": "string",
              "description": "path of the repository without the domain name in the form of my_username/my_repo"
          },
          "git": {
              "type": "string",
              "description": "The name of the git integration you want to use. If left empty, Codefresh will attempt to use the git provider that was used during account sign-up. Note that this might have unexpected results if you are changing your Git integrations."
          },
          "commit_message": {
              "type": "string",
              "description": "Text body of the comment to be created"
          },
          "working_directory": {
              "type": "string",
              "description": "The directory to which the repository is cloned. It can be an explicit path in the containerâ€™s file system, or a variable that references another step. The default value is '/codefresh/volume/${{CF_REPO_NAME}}'",
              "default": "/codefresh/volume/${{CF_REPO_NAME}}"
          },
          "git_user_name": {
              "type": "string",
              "description":"The username the commit comes from"
          },
          "git_user_email": {
              "type": "string",
              "description": "Git user email"
          },
          "allow_empty": {
              "type": "boolean",
              "description": "Allow empty commit",
              "default": false
          },
          "add": {
              "type": ["string","array"],
              "items": {
                  "type": "string"
              },
              "description": "Add file contents to the git index",
              "default": "."
          }
      }
    }
  steps:
    export_access_token:
      title: "Export git access token"
      image: quay.io/codefresh/cli
      environment:
        - GIT_INTEGRATION_NAME=${{git}}
        - ALLOW_EMPTY_BOOL=${{allow_empty}}
        - GIT_USER_NAME=${{git_user_name}}
      commands:
        - export GIT_ACCESS_TOKEN=$(codefresh get context $GIT_INTEGRATION_NAME --decrypt -o yaml | yq -r -c .spec.data.auth.password)
        - echo GIT_ACCESS_TOKEN=$GIT_ACCESS_TOKEN >> /meta/env_vars_to_export
        - export GIT_ACCESS_TOKEN_USER=$(codefresh get context $GIT_INTEGRATION_NAME --decrypt -o yaml | yq -r -c .spec.data.auth.username)
        # If the git integration does not include the auth username, then default to the git_user_name argument
        - if [ "$GIT_ACCESS_TOKEN_USER" = "null" ]; then export GIT_ACCESS_TOKEN_USER=$GIT_USER_NAME; fi
        - echo GIT_ACCESS_TOKEN_USER=$GIT_ACCESS_TOKEN_USER >> /meta/env_vars_to_export
        - export ALLOW_EMPTY=$(if [[ $ALLOW_EMPTY_BOOL == true ]]; then echo '--allow-empty';fi)
        - echo ALLOW_EMPTY=$ALLOW_EMPTY >> /meta/env_vars_to_export
        - export ADD_FILES=$(echo ${{add}} | tr "," " ")
        - echo ADD_FILES=$ADD_FILES >> /meta/env_vars_to_export

    commit_and_push:
      title: "Commit and push"
      image: quay.io/bitnami/git
      environment:
        - REPO=${{repo}}
        - COMMIT_MESSAGE=${{commit_message}}
        - WORKING_DIRECTORY=${{working_directory}}
        - GIT_USER_NAME=${{git_user_name}}
        - GIT_USER_EMAIL=${{git_user_email}}

      commands:
        - cd ${WORKING_DIRECTORY}
        - export GIT_FQDN=$(git remote get-url --push origin | awk -F[/:] '{print $4}')
        - echo GIT_USER_NAME=$GIT_USER_NAME GIT_USER_EMAIL=$GIT_USER_EMAIL
        - git config --global user.name ${GIT_USER_NAME}
        - git config --global user.email ${GIT_USER_EMAIL}
        - git add ${ADD_FILES}
        - git commit ${ALLOW_EMPTY} -m "${COMMIT_MESSAGE}"
        - git status
        - echo git push "https://$GIT_ACCESS_TOKEN_USER:REDACTED@$GIT_FQDN/$REPO.git"
        - git push "https://$GIT_ACCESS_TOKEN_USER:$GIT_ACCESS_TOKEN@$GIT_FQDN/$REPO.git"
