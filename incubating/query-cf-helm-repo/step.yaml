version: '1.0'
kind: step-type
metadata:
  name: codefreshdemo/query-cf-helm-repo # FIXME remove account
  title: Query the Codefresh Helm Repo
  version: 0.0.1
  isPublic: false  # FIXME - update to true
  description: >-
    Query the Codefresh Helm Repository for the specified version of the specified chart.
    Outputs a pipeline variable called CHART_VER_FOUND with a value of 'true' or 'false' to
    indicate the result of the query. Can optionally throw an error if the query does not
    return a specified result. Requires importing the CF_HELM_DEFAULT shared configuration 
    into the pipeline's variables.
  sources:
    - 'https://github.com/codefresh-io/steps/tree/master/incubating/query-cf-helm-repo'
  stage: incubating
  maintainers:
    - name: Ted Spinks
      email: ted.spinks@codefresh.io
  categories:
    - deployment
  official: true
  tags: []
  icon:
    type: svg
    url: https://cdn.jsdelivr.net/gh/codefresh-contrib/cfstep-helmfile/helm-logo.svg
    background: "#f4f4f4"
  examples:
    - description: Check if a chart verion is already in the repo
      workflow:
        check_repo_for_chart:
          title: Check if a chart verion is already in the repo
          type: query-cf-helm-repo
          arguments:
            CHART_NAME: my-chart
            CHART_VERSION: 0.0.1
    - description: Fail pipeline if chart aleady present
      workflow:
        check_repo_for_chart:
          title: Check if a chart verion is already in the repo
          type: query-cf-helm-repo
          arguments:
            CHART_NAME: my-chart
            CHART_VERSION: 0.0.1
            FAIL_WHEN: 'true'
  latest: true
spec:
  arguments: |-
    {
        "definitions": {},
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "additionalProperties": false,
        "patterns": [],
        "required": [
            "CHART_NAME",
            "CHART_VERSION"
        ],
        "properties": {
            "CHART_NAME": {
                "type": "string",
                "description": "The name of the chart to look for in your Codefresh Helm Repo."
            },
            "CHART_VERSION": {
                "type": "string",
                "description": "The version of the chart to look for in your Codefresh Helm Repo."
            },
            "FAIL_WHEN": {
                "type": "string",
                "description": "Optional. Specify 'true' or 'false'. The step will fail when the query returns the specified result."
            }
        }
    }
  returns: |-
    {
      "definitions": {},
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "additionalProperties": true,
      "patterns": [],
      "required": [
          "CHART_VER_FOUND"
      ],
      "properties": {
          "CHART_VER_FOUND": {
              "type": "string",
              "description": "Returns 'true' or 'false' to indicate whether or not the specified chart version was found"
          }
      }
    }    
  stepsTemplate: |-
    query_cf_helm_repo:
      image: gtspinks/query-cf-helm-repo:0.0.1 # FIXME quay.io/codefreshplugins/query-cf-helm-repo:0.0.1
      commands:
        # Verify required env var from pipeline
        - >-
          if [ -z ${CF_API_KEY+x} ] || [ -z ${CF_CTX_CF_HELM_DEFAULT_URL+x} ]; then
          echo;
          echo "Required variables are missing, please import CF_HELM_DEFAULT shared config into the pipeline variables";
          exit 1;
          fi

        # Suppress helm warnings about group-accessible kubeconfig
        - chmod 600 $KUBECONFIG

        # Set token var for cm:// helm repo protocol
        - export HELM_REPO_ACCESS_TOKEN=${CF_API_KEY}

        # Add Codefresh Helm Repo
        - helm repo add codefresh ${CF_CTX_CF_HELM_DEFAULT_URL}
        - helm repo update
        - helm repo list

        # Query for the specified chart name. The grep filters out substring matches.
        - >-
          helm search repo codefresh/${CHART_NAME} --version ${CHART_VERSION}
          | grep "^codefresh/${CHART_NAME}\t"
          && export RESULT=$?
          || export RESULT=$?

        # Output results
        - >-
          echo;
          if [ $RESULT -eq 0 ]; then
          echo "Version $CHART_VERSION of chart $CHART_NAME was found in the Helm Repo";
          export CHART_VER_FOUND=true;
          else
          echo "Version $CHART_VERSION of chart $CHART_NAME was not found in the Helm Repo";
          export CHART_VER_FOUND=false;
          fi
        - cf_export CHART_VER_FOUND
        - if [ "$FAIL_WHEN" == "$CHART_VER_FOUND" ]; then echo; echo FAIL_WHEN condition met; exit 1; fi
      environment:
      [[ range $key, $val := .Arguments ]]
        - '[[ $key ]]=[[ $val ]]'
      [[- end ]]
  delimiters:
    left: '[['
    right: ']]'
