kind: step-type
version: '1.0'
metadata:
  name: service-now
  version: 1.2.3
  isPublic: true
  description: Integration with ServiceNow Change Management
  sources:
    - https://github.com/codefresh-io/steps/tree/master/incubating/service-now
  stage: incubating
  maintainers:
    - name: Laurent Rochette
    - email: laurent.rochette@codefresh.io
  categories:
    - utilities
  official: true
  tags: []
  icon:
    type: image
    size:
      large:
        url: >-
           https://raw.githubusercontent.com/codefresh-io/steps/master/incubating/service-now/images/servicenow-2.png
  examples:
    - description: Create a new Change Request
      workflow:
        createChange:
          title: Create a Service Now Change Request
          type: service-now
          stage: deploy
          arguments:
            CR_ACTION: createCR
            TOKEN: ${CF_API_TOKEN}
            SN_INSTANCE: https://instance.service-now.com
            SN_USER: ${{SN_USER}}
            SN_PASSWORD: ${{SN_PASSWORD}}
            CR_CONFLICT_POLICY: reject
            CR_DATA: '{"short_description":"This is a Change Request created by Codefresh","description":"long description for Codefresh build ${{CF_BUILD_ID}}","justification":"because our app is awesome"}'
    - description: Modify an existing Change Request
      workflow:
        modifyCR:
          title: Modify the CR
          type: service-now
          stage: deploy
          arguments:
            CR_ACTION: closeCR
            CR_SYSID: ${{CR_SYSID}}
            SN_INSTANCE: https://instance.service-now.com
            SN_USER: ${{SN_USER}}
            SN_PASSWORD: ${{SN_PASSWORD}}
            CR_DATA: '{"test_plan":"We ran all the test in the awesome test suite. Test pass rate: ${{TEST_RATE}}"}'
    - description: Close an existing Change Request
      workflow:
        closeCR:
          title: Close the CR
          type: service-now
          stage: cleaning
          arguments:
            CR_ACTION: closeCR
            CR_SYSID: ${{CR_SYSID}}
            SN_INSTANCE: https://instance.service-now.com
            SN_USER: ${{SN_USER}}
            SN_PASSWORD: ${{SN_PASSWORD}}
            CR_CLOSE_CODE: successful
            CR_CLOSE_NOTES: "CR closed by Codefresh build ${{CF_BUILD_ID}}"
            CR_DATA: '{"work_notes":"Closed automatically by Codefresh build ${{CF_BUILD_ID}}"}'

spec:
  arguments: |-
    {
      "definitions": {},
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "additionalProperties": true,
      "patterns": [],
      "required": [
        "SN_INSTANCE",
        "SN_USER",
        "SN_PASSWORD"
      ],
      "properties": {
        "SN_IMAGE": {
          "type": "string",
          "default": "quay.io/codefreshplugins/service-now",
          "description": "The ServiceNow container image registry/image for the step."
        },
        "SN_IMAGE_VERSION": {
          "type": "string",
          "default": "1.2.3",
          "description": "Version of the ServiceNow image to use, Docker image tag."
        },
        "SN_INSTANCE": {
            "type": "string",
            "description": "The URL to your Service-now instance aka https://instance.service-now.com"
        },
        "SN_USER": {
            "type": "string",
            "description": "The username to log into the instance"
        },
        "SN_PASSWORD": {
            "type": "string",
            "description": "The password associated to the username to log  into the instance"
        },
        "TOKEN": {
            "type": "string",
            "description": "The Codefresh API token to allow ServiceNow to approve/deny the pipeline"
        },
        "SN_NAMESPACE": {
            "type": "string",
            "description": "The endpoint namespace to call if using a different one. The system will call $SN_INSTANCE/api/$namespace/codefresh/callback",
            "default": "409723"
        },
        "CR_DATA": {
            "type": "string",
            "description": "The body to create the CR. Need to include all the fields required for your Change Management implementation."
        },
        "CR_CONFLICT_POLICY": {
            "type": "string",
            "description": "Policy to exectute in case of schedule conflict. Accepted values are ignore (no check is done), wait (pipeline will wait until the conflict is resolved) or reject ServiceNow flow returns a deny answer",
            "default": "ignore"
        },
        "CR_ACTION": {
            "type": "string",
            "description": "Action to execute: createCR or closeCR",
            "default": "createCR"
        },
        "CR_CLOSE_CODE": {
          "type": "string",
          "description": "Close code for the closeCR action: successful, successful_issues or unsuccessful",
          "default": "successful"
        },
        "CR_CLOSE_NOTES": {
          "type": "string",
          "description": "Close notes for the closeCR action: successful, successful_issues or unsuccessful",
          "default": "Closed by Codefresh"
        },
        "DEBUG": {
          "type": "boolean",
          "default": false,
          "description": "a hidden option show more debug info"
        }
      }
    }
  returns: |-
    {
        "definitions": {},
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "additionalProperties": true,
        "patterns": [],
        "required": [
          "CR_NUMBER",
          "CR_SYSID"
        ],
        "properties": {
            "CR_SYSID": {
                "type": "string",
                "description": "The sysid of the CR created"
            },
            "CR_NUMBER": {
                "type": "string",
                "description": "The number of the CR created."
            }
        }
    }
  stepsTemplate: |-
    [[ if eq .Arguments.CR_ACTION "closeCR" ]]
    closeCR:
      name: Close a ServiceNow Change Request
      title: Use REST API to close the CR
      image: '[[.Arguments.SN_IMAGE]]:[[.Arguments.SN_IMAGE_VERSION]]'
      environment:
      [[ range $key, $val := .Arguments ]]
        - '[[ $key ]]=[[ $val ]]'
      [[- end ]]
        - ACTION=closecr
    [[ end ]]
    [[ if eq .Arguments.CR_ACTION  "updateCR" ]]
    updateCR:
      name: Update a ServiceNow Change Request
      title: Use REST API to update the CR
      image: '[[.Arguments.SN_IMAGE]]:[[.Arguments.SN_IMAGE_VERSION]]'
      environment:
      [[ range $key, $val := .Arguments ]]
        - '[[ $key ]]=[[ $val ]]'
      [[- end ]]
        - ACTION=updatecr
    [[ end ]]
    [[ if eq .Arguments.CR_ACTION  "createCR" ]]
    createcr:
      name: Create a ServiceNow Change Request
      title: Use REST API to create a CR
      image: '[[.Arguments.SN_IMAGE]]:[[.Arguments.SN_IMAGE_VERSION]]'
      environment:
      [[ range $key, $val := .Arguments ]]
        - '[[ $key ]]=[[ $val ]]'
      [[- end ]]
        - ACTION=createcr
    annotation:
      name: Assign CR_NUMBER as annotation
      image: quay.io/codefresh/cli
      commands:
        - |
          codefresh create annotation workflow ${{CF_BUILD_ID}} CR_NUMBER=${{CR_NUMBER}}
          codefresh create annotation workflow ${{CF_BUILD_ID}} CR_SYSID=${{CR_SYSID}}
          cf_export annotation_CF_OUTPUT_URL="[[.Arguments.SN_INSTANCE]]/nav_to.do?uri=%2Fchange_request.do%3Fsys_id%3D$CR_SYSID"
    callback:
      name: invoke scripted REST API to have ServiceNow callback Codefresh when CR is approved/rejected
      title: ServiceNow callback setup
      image: '[[.Arguments.SN_IMAGE]]:[[.Arguments.SN_IMAGE_VERSION]]'
      environment:
      [[ range $key, $val := .Arguments ]]
        - '[[ $key ]]=[[ $val ]]'
      [[- end ]]
        - ACTION=callback
    [[ end ]]
  delimiters:
    left: '[['
    right: ']]'
